export class Chatbot {
  constructor(options = {}) {
    this.apiUrl = options.apiUrl || 'http://localhost:8000/chatbot/message/stream';
    this.walletAddress = options.walletAddress || null;
    this.scoreData = options.scoreData || null;
    this.messages = [];
    this.isOpen = false;
    this.isMinimized = false;
    this.typing = false;
    
    this.createChatbotUI();
    this.setupEventListeners();
    
    // Th√™m tin nh·∫Øn ch√†o m·ª´ng ban ƒë·∫ßu t·ª´ chatbot
    this.addInitialMessages();
  }
  
  createChatbotUI() {
    // T·∫°o container ch√≠nh
    this.container = document.createElement('div');
    this.container.className = 'chatbot-container';
    this.container.style.display = 'none';
    
    // T·∫°o HTML cho chatbot
    this.container.innerHTML = `
      <div class="chatbot-launcher">
        <div class="chatbot-launcher-icon">
          <i class="fas fa-robot"></i>
          <div class="chatbot-notification-dot"></div>
        </div>
      </div>
      
      <div class="chatbot-box">
        <div class="chatbot-header">
          <div class="chatbot-title">
            <i class="fas fa-robot"></i>
            <span>BAAI Assistant</span>
          </div>
          <div class="chatbot-actions">
            <button class="chatbot-action minimize">
              <i class="fas fa-minus"></i>
            </button>
            <button class="chatbot-action close">
              <i class="fas fa-times"></i>
            </button>
          </div>
        </div>
        
        <div class="chatbot-body">
          <div class="chatbot-messages"></div>
        </div>
        
        <div class="chatbot-footer">
          <div class="chatbot-input-container">
            <input 
              type="text" 
              class="chatbot-input" 
              placeholder="Ask about your score..." 
            />
            <button class="chatbot-send">
              <i class="fas fa-paper-plane"></i>
            </button>
          </div>
          <div class="chatbot-powered-by">
            Powered by BAAI
          </div>
        </div>
      </div>
    `;
    
    // Th√™m v√†o body
    document.body.appendChild(this.container);
    
    // L∆∞u c√°c element ƒë·ªÉ d·ªÖ truy c·∫≠p
    this.launcherEl = this.container.querySelector('.chatbot-launcher');
    this.boxEl = this.container.querySelector('.chatbot-box');
    this.messagesEl = this.container.querySelector('.chatbot-messages');
    this.inputEl = this.container.querySelector('.chatbot-input');
    this.sendBtn = this.container.querySelector('.chatbot-send');
    this.minimizeBtn = this.container.querySelector('.chatbot-action.minimize');
    this.closeBtn = this.container.querySelector('.chatbot-action.close');
  }
  
  setupEventListeners() {
    // N√∫t launcher ƒë·ªÉ m·ªü chatbot
    this.launcherEl.addEventListener('click', () => this.toggleChatbot());
    
    // N√∫t minimize
    this.minimizeBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      this.minimizeChatbot();
    });
    
    // N√∫t close
    this.closeBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      this.closeChatbot();
    });
    
    // G·ª≠i tin nh·∫Øn khi nh·∫•n n√∫t send
    this.sendBtn.addEventListener('click', () => this.sendMessage());
    
    // G·ª≠i tin nh·∫Øn khi nh·∫•n Enter
    this.inputEl.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') this.sendMessage();
    });
    
    // ƒê√°nh d·∫•u ƒëang nh·∫≠p khi user nh·∫≠p li·ªáu
    this.inputEl.addEventListener('focus', () => {
      this.boxEl.classList.add('typing');
    });
    
    this.inputEl.addEventListener('blur', () => {
      if (this.inputEl.value.trim() === '') {
        this.boxEl.classList.remove('typing');
      }
    });
    
    // Theo d√µi thay ƒë·ªïi k√≠ch th∆∞·ªõc m√†n h√¨nh
    window.addEventListener('resize', () => this.adjustPosition());
  }
  
  addInitialMessages() {
    setTimeout(() => {
      const welcomeMsg = `üëã Hi there! I'm BAAI Assistant, your personal guide to understand your Web3 credit score.`;
      this.appendMessage(welcomeMsg, 'assistant');
      this.messages.push({ role: 'assistant', content: welcomeMsg });
      
      // N·∫øu c√≥ d·ªØ li·ªáu v·ªÅ ƒëi·ªÉm s·ªë, hi·ªÉn th·ªã th√¥ng tin ƒë√≥
      if (this.scoreData && this.scoreData.score) {
        // ƒê·∫£m b·∫£o s·ª≠ d·ª•ng s·ªë nguy√™n
        const score = Math.round(this.scoreData.score);
        // ƒê·∫£m b·∫£o c√≥ scoreLabel h·ª£p l·ªá
        const scoreLabel = this.scoreData.scoreLabel || this.getScoreLabel(score);
        
        const scoreMsg = `I see your credit score is ${score} (${scoreLabel}). What would you like to know about your score?`;
        setTimeout(() => {
          this.appendMessage(scoreMsg, 'assistant');
          this.messages.push({ role: 'assistant', content: scoreMsg });
        }, 1000);
        
        // Ch·ªâ th√™m c√°c g·ª£i √Ω m·ªôt l·∫ßn
        setTimeout(() => {
          this.appendSuggestions([
            'How is my score calculated?',
            'How can I improve my score?',
            'What is affecting my score negatively?',
            'What are my strongest factors?'
          ]);
        }, 1500);
      } else {
        setTimeout(() => {
          this.appendMessage('How can I help you understand your Web3 credit score?', 'assistant');
          this.messages.push({ role: 'assistant', content: 'How can I help you understand your Web3 credit score?' });
        }, 1000);
      }
    }, 300);
  }
  
  formatAddress(address) {
    if (!address) return '';
    if (address.endsWith('.eth')) return address;
    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
  }
  
  appendMessage(content, role) {
    const messageEl = document.createElement('div');
    messageEl.className = `chatbot-message ${role}`;
    
    // Th√™m avatar cho tin nh·∫Øn c·ªßa assistant
    if (role === 'assistant') {
      messageEl.innerHTML = `
        <div class="chatbot-avatar">
          <i class="fas fa-robot"></i>
        </div>
        <div class="chatbot-bubble"></div>
      `;
      
      const bubble = messageEl.querySelector('.chatbot-bubble');
      this.animateTyping(content, bubble);
    } else {
      messageEl.innerHTML = `<div class="chatbot-bubble">${content}</div>`;
    }
    
    this.messagesEl.appendChild(messageEl);
    this.scrollToBottom();
    
    return messageEl;
  }
  
  animateTyping(content, element) {
    let i = 0;
    const speed = 15; // milliseconds per character
    
    // First show typing indicator
    element.innerHTML = '<span class="typing-indicator"><span>.</span><span>.</span><span>.</span></span>';
    
    // Then type out the message
    setTimeout(() => {
      element.innerHTML = '';
      const typeChar = () => {
        if (i < content.length) {
          element.innerHTML += content.charAt(i);
          i++;
          setTimeout(typeChar, speed);
        }
        this.scrollToBottom();
      };
      typeChar();
    }, 500);
  }
  
  appendSuggestions(suggestions) {
    // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ suggestions r·ªìi th√¨ kh√¥ng th√™m n·ªØa
    if (this.messagesEl.querySelector('.chatbot-suggestions')) {
      return;
    }
    
    const suggestionsEl = document.createElement('div');
    suggestionsEl.className = 'chatbot-suggestions';
    
    suggestions.forEach(suggestion => {
      const suggestionEl = document.createElement('button');
      suggestionEl.className = 'chatbot-suggestion';
      suggestionEl.textContent = suggestion;
      suggestionEl.addEventListener('click', () => {
        this.inputEl.value = suggestion;
        this.sendMessage();
      });
      suggestionsEl.appendChild(suggestionEl);
    });
    
    this.messagesEl.appendChild(suggestionsEl);
    this.scrollToBottom();
  }
  
  scrollToBottom() {
    this.messagesEl.scrollTop = this.messagesEl.scrollHeight;
  }
  
  sendMessage() {
    const text = this.inputEl.value.trim();
    if (!text) return;
    
    // Hi·ªÉn th·ªã tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
    this.appendMessage(text, 'user');
    
    // Th√™m v√†o m·∫£ng messages
    this.messages.push({ role: 'user', content: text });
    
    // X√≥a input
    this.inputEl.value = '';
    this.boxEl.classList.remove('typing');
    
    // Th√™m tin nh·∫Øn tr·ªëng cho assistant
    const assistantMsg = this.appendMessage('', 'assistant');
    const bubble = assistantMsg.querySelector('.chatbot-bubble');
    
    // Th√™m ch·ªâ b√°o typing
    bubble.innerHTML = '<span class="typing-indicator"><span>.</span><span>.</span><span>.</span></span>';
    
    // Call API ƒë·ªÉ l·∫•y response
    this.callChatAPI(text, bubble);
    
    // Focus input ƒë·ªÉ ti·∫øp t·ª•c chat
    this.inputEl.focus();
  }
  
  async callChatAPI(text, messageElement) {
    try {
      // Th√™m th√¥ng tin wallet v√† score v√†o message ƒë·∫ßu ti√™n
      let contextMessages = [...this.messages];
      if (this.messages.length <= 2 && (this.walletAddress || this.scoreData)) {
        let systemPrompt = "You are a helpful AI assistant that helps users understand their Web3 credit score.";
        
        if (this.walletAddress) {
          systemPrompt += ` The user's wallet address is ${this.walletAddress}.`;
        }
        
        if (this.scoreData) {
          systemPrompt += ` Their credit score is ${this.scoreData.score} (${this.scoreData.scoreLabel}).`;
          if (this.scoreData.explanation) {
            systemPrompt += ` Score explanation: ${this.scoreData.explanation}`;
          }
        }
        
        contextMessages.unshift({ role: 'system', content: systemPrompt });
      }
      
      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ messages: contextMessages })
      });
      
      if (!response.ok) {
        throw new Error(`API error: ${response.status}`);
      }
      
      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      
      // X√≥a indicator typing
      messageElement.innerHTML = '';
      
      // Bi·∫øn l∆∞u n·ªôi dung ph·∫£n h·ªìi
      let responseContent = '';
      
      // ƒê·ªçc t·ª´ng ph·∫ßn c·ªßa stream
      while (true) {
        const { value, done } = await reader.read();
        if (done) break;
        
        const chunk = decoder.decode(value, { stream: true });
        responseContent += chunk;
        
        // C·∫≠p nh·∫≠t n·ªôi dung tin nh·∫Øn
        messageElement.innerHTML += chunk;
        this.scrollToBottom();
      }
      
      // L∆∞u tin nh·∫Øn c·ªßa assistant v√†o m·∫£ng messages
      this.messages.push({ role: 'assistant', content: responseContent });
      
      // Th√™m suggestions sau khi tr·∫£ l·ªùi xong
      if (this.messages.length < 4) {
        setTimeout(() => {
          this.appendSuggestions([
            'Can you explain my score in simple terms?',
            'What factors impact my score most?',
            'How do I compare to other wallets?'
          ]);
        }, 1000);
      }
    } catch (error) {
      console.error('Error calling chat API:', error);
      messageElement.innerHTML = 'Sorry, I encountered an error. Please try again.';
      
      // Th√™m n√∫t retry
      const retryButton = document.createElement('button');
      retryButton.className = 'chatbot-retry-btn';
      retryButton.innerHTML = '<i class="fas fa-redo"></i> Retry';
      retryButton.addEventListener('click', () => {
        // X√≥a tin nh·∫Øn l·ªói
        messageElement.parentNode.remove();
        
        // Th·ª≠ l·∫°i
        const assistantMsg = this.appendMessage('', 'assistant');
        const bubble = assistantMsg.querySelector('.chatbot-bubble');
        this.callChatAPI(text, bubble);
      });
      
      messageElement.appendChild(retryButton);
    }
  }
  
  toggleChatbot() {
    if (!this.isOpen) {
      this.openChatbot();
    } else if (this.isMinimized) {
      this.maximizeChatbot();
    } else {
      this.minimizeChatbot();
    }
  }
  
  openChatbot() {
    this.isOpen = true;
    this.isMinimized = false;
    this.boxEl.style.display = 'flex';
    this.container.classList.add('open');
    
    // X√≥a notification dot
    this.launcherEl.querySelector('.chatbot-notification-dot').style.display = 'none';
    
    // Focus input
    setTimeout(() => {
      this.inputEl.focus();
    }, 300);
    
    this.adjustPosition();
    this.scrollToBottom();
  }
  
  minimizeChatbot() {
    this.isOpen = true;
    this.isMinimized = true;
    this.boxEl.style.display = 'none';
  }
  
  maximizeChatbot() {
    this.isMinimized = false;
    this.boxEl.style.display = 'flex';
    
    this.adjustPosition();
    this.scrollToBottom();
  }
  
  closeChatbot() {
    this.isOpen = false;
    this.boxEl.style.display = 'none';
    this.container.classList.remove('open');
  }
  
  show() {
    console.log('Showing chatbot');
    this.container.style.display = 'block';
    this.container.classList.add('animate-in');
    
    // Th√™m animation cho notification
    setTimeout(() => {
      const notificationDot = this.launcherEl.querySelector('.chatbot-notification-dot');
      if (notificationDot) {
        notificationDot.style.display = 'block';
        notificationDot.classList.add('pulse');
      }
    }, 2000);
  }
  
  hide() {
    this.container.style.display = 'none';
    this.container.classList.remove('animate-in');
  }
  
  updateData(data) {
    // Flag ƒë·ªÉ theo d√µi li·ªáu c√≥ thay ƒë·ªïi
    let dataChanged = false;
    
    // Check if wallet address changed
    if (data.walletAddress && this.walletAddress !== data.walletAddress) {
      this.walletAddress = data.walletAddress;
      dataChanged = true;
    }
    
    // Check if score data changed
    if (data.scoreData) {
      // N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu score tr∆∞·ªõc ƒë√≥ ho·∫∑c score ƒë√£ thay ƒë·ªïi
      if (!this.scoreData || 
          this.scoreData.score !== data.scoreData.score) {
        
        // L√†m tr√≤n ƒëi·ªÉm s·ªë th√†nh s·ªë nguy√™n
        if (data.scoreData.score) {
          data.scoreData.score = Math.round(data.scoreData.score);
        }
        
        // ƒê·∫£m b·∫£o lu√¥n c√≥ scoreLabel
        if (!data.scoreData.scoreLabel || data.scoreData.scoreLabel === 'undefined') {
          data.scoreData.scoreLabel = this.getScoreLabel(data.scoreData.score);
        }
        
        this.scoreData = data.scoreData;
        dataChanged = true;
      }
    }
    
    // Ch·ªâ th√™m tin nh·∫Øn m·ªõi n·∫øu d·ªØ li·ªáu thay ƒë·ªïi ho·∫∑c kh√¥ng c√≥ tin nh·∫Øn n√†o
    if (dataChanged || this.messages.length === 0) {
      // X√≥a tin nh·∫Øn c≈© n·∫øu c√≥
      this.clearMessages();
      // Th√™m tin nh·∫Øn m·ªõi
      this.addInitialMessages();
    }
  }
  
  clearMessages() {
    this.messages = [];
    if (this.messagesEl) {
      this.messagesEl.innerHTML = '';
    }
  }
  
  getScoreLabel(score) {
    if (!score) return 'Unknown';
    if (score >= 800) return 'Excellent';
    if (score >= 740) return 'Very Good';
    if (score >= 670) return 'Good';
    if (score >= 580) return 'Fair';
    return 'Poor';
  }
  
  adjustPosition() {
    // ƒê·∫£m b·∫£o chatbot lu√¥n n·∫±m trong viewport
    const windowWidth = window.innerWidth;
    const windowHeight = window.innerHeight;
    
    if (windowWidth < 768) {
      this.boxEl.style.width = '85vw';
      this.boxEl.style.height = '70vh';
      this.boxEl.style.bottom = '80px';
      this.boxEl.style.right = '10px';
    } else {
      this.boxEl.style.width = '380px';
      this.boxEl.style.height = '520px';
      this.boxEl.style.bottom = '100px';
      this.boxEl.style.right = '20px';
    }
  }
}